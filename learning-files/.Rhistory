numeric_percentage = round(All_Points_Earn/All_Points_Possible,3),
Percentage_Correct = paste0(100*(numeric_percentage),' %')) %>%
arrange(numeric_percentage)
setwd("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/04_report_data/00_block_sheets")
write.csv(view_person_block_perform_df,paste0('block_analysis_by_student_',Sys.Date(),'.csv'),row.names = FALSE)
view_person_quiz_df = mod1_final_df  %>%
group_by(sis_id,assignment) %>%
summarise(`All Points Earn`=  sum(points_earn),
`All Points Possible`=  sum(points_possible)) %>%
mutate(`Percentage Correct` = paste0(100*( round(`All Points Earn`/`All Points Possible`,3) ),' %')) %>%
arrange(`Percentage Correct`)
setwd("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/04_report_data/01_grade_sheets")
write.csv(view_person_quiz_df,paste0('quiz_analysis_by_student_',Sys.Date(),'.csv'),row.names = FALSE)
View(view_person_block_perform_df)
library(dplyr)
library(stringr)
library(ggplot2)
library(kableExtra)
block_df = read.csv('block_analysis_by_student_2022-10-10.csv')
quiz_df = read.csv('quiz_analysis_by_student_2022-10-10.csv')
load(paste0("composite-file-",Sys.Date(),".rda"))
student_id = as.numeric('27753472')
student_block_df = block_df %>%
filter(sis_id == student_id)
student_quiz_df = quiz_df %>%
filter(sis_id == student_id)
general_df = final_df %>%
filter(sis_id == student_id)
block_viz_df = student_block_df %>%
mutate(block_number = paste0('C-',1:n()))
block_viz_df %>%
ggplot(aes(x = reorder(block_number,-numeric_percentage), y = numeric_percentage, fill = numeric_percentage < 70)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=Percentage_Correct), position=position_dodge(width=0.9), hjust=-0.20,size = 3) +
scale_fill_manual("Improve", values = c("green", "firebrick")) +
ylim(0,max(block_viz_df$numeric_percentage) + 6) +
labs(x = 'Concept Number', y = 'Percentage', title = 'Performance by Concept',
caption = "If the legend states just FALSE, study based on what you find that you are missing") +
theme_bw() +
theme(plot.title = element_text(size = 17.5, hjust = 0.5, face = 'bold'),
axis.title = element_text(size = 12, face = 'bold')
) +
coord_flip()
block_viz_df %>%
select(Block,Percentage_Correct) %>%
rename(
Concept = Block,
`Percentage Correct` = Percentage_Correct) %>%
kable() %>%
kable_styling(font_size = 17) %>%
#kable_styling(font_size = 17,latex_options = "HOLD_position") %>%
column_spec(1,width = "17.5cm")  %>%
row_spec(0,bold = TRUE)
quiz_viz_df = student_quiz_df %>%
mutate(assignment_number = paste0('A-',1:n()))
quiz_viz_df %>%
ggplot(aes(x = reorder(assignment_number,-numeric_percentage), y = numeric_percentage, fill = numeric_percentage < 70)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=Percentage_Correct), position=position_dodge(width=0.9), hjust=-0.20,size = 3) +
scale_fill_manual("Review & Study", values = c("green", "firebrick")) +
ylim(0,max(quiz_viz_df$numeric_percentage) + 6) +
labs(x = 'Type of Assignment', y = 'Percentage', title = 'Performance by Assignment',caption = "If the legend states just FALSE, study based on what you find that you are missing") +
theme_bw() +
theme(plot.title = element_text(size = 17.5, hjust = 0.5, face = 'bold'),
axis.title = element_text(size = 12, face = 'bold')
) +
coord_flip()
quiz_viz_df %>%
select(assignment,Percentage_Correct) %>%
rename(
`Quiz Name` = assignment,
`Percentage Correct` = Percentage_Correct) %>%
kable() %>%
kable_styling(font_size = 17) %>%
#kable_styling(font_size = 17,latex_options = "HOLD_position") %>%
row_spec(0,bold = TRUE)
library(tidyverse)
source('00_primary_functions.R')
## Response Data Frame
responses_df = reformatResponses(path = "~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/00_raw_scores" ) %>%
mutate(id = as.numeric(id))
## Roster Data Frame
id_roster_df = readxl::read_xlsx('~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/roster.xlsx', sheet = 'id_roster')
## Emails Roster
email_roster_df = readxl::read_xlsx('~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/roster.xlsx', sheet = 'current_roster') %>%
select(EMPLID,Email) %>%
mutate(sis_id = as.numeric(substring(EMPLID,3)))
org_ques_df = gatherAllAssignmentQuestions(path = '~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/00_raw_scores' )
## Join all Data Frames
res_q_df = responses_df %>%
left_join(id_roster_df, by = 'id') %>%
left_join(email_roster_df, by = 'sis_id')
View(res_q_df)
## Questions
ques_labeled_df = googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1cuYLtl2KjHLFbr46op7Yociqx8dkI5xRcE4WhjXIjug/edit#gid=1167182737') %>%
mutate(SCBT = str_trim(SCBT,side = 'both'))
## SCBT complete labels
scbt_df = googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1LVFLwXPlh8I8N-FGc95UpYMelDAZABdCHJPahd56L0g/edit#gid=0') %>%
select(SCBT,Concept, Block, Topic) %>%
mutate(SCBT = str_trim(SCBT,side = 'both'))
## Join SCBT complete labels l with questions
full_ques_df = ques_labeled_df %>%
left_join(scbt_df, 'SCBT')
View(full_ques_df)
tmp3_df = res_q_df %>%
filter(assignment == 'Tues Quiz 2')
View(tmp3_df)
tmp3_df = res_q_df %>%
filter(assignment == 'Tues Quiz 2',
str_detect(assessment_variables, "NUMBER_OF_POINTS"))
View(tmp3_df)
library(tidyverse)
source('00_primary_functions.R')
## Response Data Frame
responses_df = reformatResponses(path = "~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/00_raw_scores" ) %>%
mutate(id = as.numeric(id))
## Roster Data Frame
id_roster_df = readxl::read_xlsx('~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/roster.xlsx', sheet = 'id_roster')
## Emails Roster
email_roster_df = readxl::read_xlsx('~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/roster.xlsx', sheet = 'current_roster') %>%
select(EMPLID,Email) %>%
mutate(sis_id = as.numeric(substring(EMPLID,3)))
org_ques_df = gatherAllAssignmentQuestions(path = '~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/00_raw_scores' )
## Join all Data Frames
res_q_df = responses_df %>%
left_join(id_roster_df, by = 'id') %>%
left_join(email_roster_df, by = 'sis_id')
## Note: When I run this, I'm going to have question_bank.csv
## that I only provide questions that are not already in data frame.
## Be careful:
## 1) Run this chunk every report
## 5) Bind Rows of questions_fall_2022.xslx to labelled questions in step 4 (in R)
# current_ques_df = gatherAllAssignmentQuestions(path = '~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/00_raw_scores' ) %>%
#   mutate(quiz_info = str_replace(number_points,'_NUMBER_OF_POINTS_','-')) %>%
#   separate(quiz_info,into = c('quiz','numerical_points'),sep = '-',remove = TRUE) %>%
#   select(-number_points,-quizName) %>%
#   mutate(SCBT = "")
## 2) Bring in questions_fall_2022.xlsx (in R)
# all_fall22_ques_df = readxl::read_xlsx("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/02_questions_from_quizzes/questions_fall_2022.xlsx") %>%
#   mutate(q_id = as.character(q_id))
## 3) Do an antijoin to get rid of questions that are already in questions_fall_2022.xlsx (in R)
# unlabel_ques_df = current_ques_df %>%
#   anti_join(all_fall22_ques_df,by = "q_id")
## 4) Label questions as CBT in recent_questions_"DATE" using Danielle's quiz Google Doc (in excel)
# setwd("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/02_questions_from_quizzes")
# write.csv(unlabel_ques_df,paste0('recent_questions_',Sys.Date(),'.csv'),row.names = FALSE)
## 5) Bind Rows of questions_fall_2022.xslx to labelled questions in step 4 (in excel)
## Questions
ques_labeled_df = googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1cuYLtl2KjHLFbr46op7Yociqx8dkI5xRcE4WhjXIjug/edit#gid=1167182737') %>%
mutate(SCBT = str_trim(SCBT,side = 'both'))
## SCBT complete labels
scbt_df = googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1LVFLwXPlh8I8N-FGc95UpYMelDAZABdCHJPahd56L0g/edit#gid=0') %>%
select(SCBT,Concept, Block, Topic) %>%
mutate(SCBT = str_trim(SCBT,side = 'both'))
## Join SCBT complete labels l with questions
full_ques_df = ques_labeled_df %>%
left_join(scbt_df, 'SCBT')
## Joining Questions with Responses
final_df = res_q_df %>%
filter(str_detect(assessment_variables,'NUMBER_OF_POINTS')) %>%
separate(assessment_variables,c('q_id','info'),sep = ':',remove = TRUE) %>%
select(-name.y,-info) %>%
rename(name = name.x) %>%
mutate(q_id = as.numeric(q_id)) %>%
left_join(full_ques_df, 'q_id')
setwd("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/03_composite_sheets")
save(final_df,file = paste0('composite-file-',Sys.Date(),'.rda'))
View(final_df)
tmp2_df =final_df %>%
filter(Block == 'Syllabus') %>%
select(q_id,SCBT, assignment) %>%
distinct()
View(tmp2_df)
library(dplyr)
library(stringr)
library(ggplot2)
library(kableExtra)
load(paste0("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/03_composite_sheets/composite-file-",Sys.Date(),".rda"))
## Change variable Names
final_df = final_df %>%
rename(points_earn = values,
points_possible = numerical_points) %>%
mutate(points_earn = as.numeric(points_earn),
points_possible = as.numeric(points_possible))
freq_ques_df = final_df %>%
select(quiz,question_number,Block,SCBT) %>%
distinct()
view_freq_ques_df = freq_ques_df %>%
group_by(Block) %>%
summarise(`Number of Questions` = n()) %>%
arrange(desc(`Number of Questions`))
view_freq_ques_df %>%
kable(format = 'html') %>%
kable_styling(font_size = 12)
## a. I need to find max attempt
## Find the last attempt for each student for each quiz
last_attempt_df = final_df %>%
group_by(name,assignment) %>%
summarise(max_attempt = max(attempt))
## Last attempt Graded
mod1_final_df = final_df %>%
inner_join(last_attempt_df, by = c('name','assignment','attempt'='max_attempt'))
view_block_perform_df = mod1_final_df %>%
group_by(Block) %>%
summarise(All_Points_Earn =  sum(points_earn),
All_Points_Possible =  sum(points_possible)) %>%
mutate(
numeric_percentage = round(All_Points_Earn/All_Points_Possible,3),
Percentage_Correct = paste0(100*(numeric_percentage),' %')) %>%
arrange(numeric_percentage)
view_block_perform_df %>%
kable(format = 'html') %>%
kable_styling(font_size = 12)
view_quiz_perform_df = mod1_final_df  %>%
group_by(assignment) %>%
summarise(All_Points_Earn =  sum(points_earn),
All_Points_Possible =  sum(points_possible)) %>%
mutate(
numeric_percentage = round(All_Points_Earn/All_Points_Possible,3),
Percentage_Correct = paste0(100*(numeric_percentage),' %')) %>%
arrange(numeric_percentage)
view_quiz_perform_df %>%
kable(format = 'html') %>%
kable_styling(font_size = 12)
view_person_block_perform_df = mod1_final_df  %>%
group_by(sis_id,Block) %>%
summarise(All_Points_Earn =  sum(points_earn),
All_Points_Possible =  sum(points_possible)) %>%
mutate(
numeric_percentage = round(All_Points_Earn/All_Points_Possible,3)*100,
Percentage_Correct = paste0((numeric_percentage),' %')) %>%
arrange(numeric_percentage)
setwd("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/04_report_data/00_block_sheets")
write.csv(view_person_block_perform_df,paste0('block_analysis_by_student_',Sys.Date(),'.csv'),row.names = FALSE)
view_person_quiz_df = mod1_final_df  %>%
group_by(sis_id,assignment) %>%
summarise(All_Points_Earn =  sum(points_earn),
All_Points_Possible =  sum(points_possible)) %>%
mutate(
numeric_percentage = round(All_Points_Earn/All_Points_Possible,3)*100,
Percentage_Correct = paste0((numeric_percentage),' %')) %>%
arrange(numeric_percentage)
setwd("~/Important_Files/Cal_Poly/01_Class_Material/STAT_252/fall_2022/05_grading/04_report_data/01_grade_sheets")
write.csv(view_person_quiz_df,paste0('quiz_analysis_by_student_',Sys.Date(),'.csv'),row.names = FALSE)
View(freq_ques_df)
## a. I need to find max attempt
## Find the last attempt for each student for each quiz
last_attempt_df = final_df %>%
group_by(name,assignment) %>%
summarise(max_attempt = max(attempt))
## Last attempt Graded
mod1_final_df = final_df %>%
inner_join(last_attempt_df, by = c('name','assignment','attempt'='max_attempt'))
view_block_perform_df = mod1_final_df %>%
group_by(Block) %>%
summarise(All_Points_Earn =  sum(points_earn),
All_Points_Possible =  sum(points_possible)) %>%
mutate(
numeric_percentage = round(All_Points_Earn/All_Points_Possible,3),
Percentage_Correct = paste0(100*(numeric_percentage),' %')) %>%
arrange(numeric_percentage)
view_block_perform_df %>%
kable(format = 'html') %>%
kable_styling(font_size = 12)
View(final_df)
chisq.test(x = c(5,6,6,6,4,9,4), p = c(0.4,rep(0.1,6)))
chisq.test(x = c(5,6,6,6,4,9,4))
chisq.test(x = c(5,7,8,6,7,4,6), p = c(0.4,rep(0.1,6)))
chisq.test(x = c(5,7,8,6,7,4,6))
chisq.test(x = c(12,4,7,4,2,2,5),p = c(0.1,0.1,0.4,0.1,0.1,0.1,0.1) )
chisq.test(x = c(12,4,7,4,2,2,5) )
table(king_county_data$smoker,
king_county_data$bwt_by_3rdQ)
library(statcalpolypackage)
library(tidyverse)
table(king_county_data$smoker,
king_county_data$bwt_by_3rdQ)
king_county_data = king_county_data %>%
mutate(bwt_by_3rdQ = case_when(
bwt > 3766 ~ 'heavy',
bwt <= 3766 ~ 'normal'
))
table(king_county_data$smoker,
king_county_data$bwt_by_3rdQ)
View(king_county_data)
prop.table(table(king_county_data$smoker,
king_county_data$bwt_by_3rdQ))
prop.test(table(king_county_data$smoker,
king_county_data$bwt_by_3rdQ))
table(king_county_data$education_level)
2500/3
chisq.test(table(king_county_data$education_level))
table(king_county_data$education_level,
king_county_data$bwt_by_3rdQ)
chisq.test(table(king_county_data$education_level,
king_county_data$bwt_by_3rdQ))
1 - pchisq(2.278,2)
select(mtcars,mpg)
library(tidyverse)
select(mtcars,mpg)
mtcars %>%
select(mpg)
mpg_df = mtcars %>%
select(mpg)
View(mpg_df)
mtcars %>%
pull(mpg)
mpg_vec = mtcars %>%
pull(mpg)
mpg_vec
n_ss = length(mpg_vec)
n_ss
n_ss = length(mpg_vec)
n_ss
mpg_sum = sum(mpg_vec)
mpg_sum
mpg_sum/n_ss
mean(mpg_vec)
mpg_mean = mpg_sum/n_ss
mean(mtcars)
library(statcalpolypackage)
library(statcalpolypackage)
library(tidyverse)
king_county_data = king_county_data %>%
mutate(bwt_by_3rdQ = case_when(
bwt > 3766 ~ 'heavy',
bwt <= 3766 ~ 'normal'
))
table(king_county_data$smoker,king_county_data$bwt_by_3rdQ)
prop.test(table(king_county_data$smoker,king_county_data$bwt_by_3rdQ))
0.2597 - 0.12
21/175
604+1721
# Demo data
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
# Demo data
library(fmsb)
install.packages("fmsb")
# Demo data
library(fmsb)
exam_scores <- data.frame(
row.names = c("Student.1", "Student.2", "Student.3"),
Biology = c(7.9, 3.9, 9.4),
Physics = c(10, 20, 0),
Maths = c(3.7, 11.5, 2.5),
Sport = c(8.7, 20, 4),
English = c(7.9, 7.2, 12.4),
Geography = c(6.4, 10.5, 6.5),
Art = c(2.4, 0.2, 9.8),
Programming = c(0, 0, 20),
Music = c(20, 20, 20)
)
# Define the variable ranges: maximum and minimum
max_min <- data.frame(
Biology = c(20, 0), Physics = c(20, 0), Maths = c(20, 0),
Sport = c(20, 0), English = c(20, 0), Geography = c(20, 0),
Art = c(20, 0), Programming = c(20, 0), Music = c(20, 0)
)
rownames(max_min) <- c("Max", "Min")
# Bind the variable ranges to the data
df <- rbind(max_min, exam_scores)
df
student1_data <- df[c("Max", "Min", "Student.1"), ]
radarchart(student1_data)
rbinom(60,1,0.5)
sleep = ifelse(rbinom(60,1,0.5) == 1,'Yes','No')
sleep_num  = ifelse(sleep == 'Yes', 0.75, 0.25)
rbinom(60,2)
rbinom(60,2,0.33)
exercise = ifelse( m == 2, 'Good',
ifelse(m == 1,'Normal','Bad'))
m = rbinom(60,2,0.33)
exercise = ifelse( m == 2, 'Good',
ifelse(m == 1,'Normal','Bad'))
mood
m = rbinom(60,2,0.33)
mood = ifelse( m == 2, 'Good',
ifelse(m == 1,'Normal','Bad'))
mood
mood_num  = ifelse( mood == 'Good', 0.75,
ifelse(mood == 'Normal',0.5,0.25))
0.4 *mood_num + 0.2 *(sleep_num +diet_num + exercise_num)
sleep = ifelse(rbinom(60,1,0.5) == 1,'Yes','No')
sleep_num  = ifelse(sleep == 'Yes', 0.75, 0.25)
diet = ifelse(rbinom(60,1,0.5) == 1,'Yes','No')
diet_num  = ifelse(diet == 'Yes', 0.75, 0.25)
exercise = ifelse(rbinom(60,1,0.5) == 1,'Yes','No')
exercise_num  = ifelse(exercise == 'Yes', 0.75, 0.25)
m = rbinom(60,2,0.33)
mood = ifelse( m == 2, 'Good',
ifelse(m == 1,'Normal','Bad'))
mood_num  = ifelse( mood == 'Good', 0.75,
ifelse(mood == 'Normal',0.5,0.25))
0.4 *mood_num + 0.2 *(sleep_num +diet_num + exercise_num)
outcome_cat = ifelse(outcome <0.25,'Bad',ifelse(outcome>=0.25 & outcome<0.55,
'Normal','Good'))
outcome = 0.4 *mood_num + 0.2 *(sleep_num +diet_num + exercise_num)
outcome_cat = ifelse(outcome <0.25,'Bad',ifelse(outcome>=0.25 & outcome<0.55,
'Normal','Good'))
outcome_cat
outcome_cat = ifelse(outcome <=0.25,'Bad',ifelse(outcome>=0.25 & outcome<0.55,
'Normal','Good'))
outcome
outcome_cat
library(dplyr)
this_sunday = Sys.Date() + 1
next_saturday = Sys.Date() + 5 +1
this_weeks_dates = seq(this_sunday,next_saturday, by = 1)
v1_date = sort(rep(this_weeks_dates,10))
v2_ex_num = rep(1:10)
v3_not_yet = rep('Not Yet',10)
v4_area_work = c(rep('N1',1),rep('N2',5),rep('N3',4))
v5_muscle_group = rep('',10)
info_df = data.frame(v1_date,v2_ex_num,v3_not_yet,v4_area_work,
v5_muscle_group)
b1 <- c('Bicycle','Sit Ups','Bicycle Crunch','Leg Raise','Russian Twist',
'Plank & Push Ups',
'Chest Fly','Shoulder Press','Incline Bench Press',
'Bench Press')
b2 <- c('Bicycle','Sit Ups','Bicycle Crunch','Leg Raise','Russian Twist',
'Plank & Push Ups','Curl Dumb Bell','Overhead Tricep Extension Dumb Bell',
'Hammer Curl', 'Lat Pull Down')
ell_0 =c('15 minutes',rep('',9))
## b1
rep_b1_1 = c('','10','10','10','10','30 - 5','40 - 5','40 - 5','150 - 5','150 - 5')
rep_b1_2 = c(rep('',6),'30 - 7','30 - 7','130 - 7','130 - 7')
rep_b1_3 = c(rep('',6),'27.5 - 10','27.5 - 10','110 - 10','110 - 10')
rep_b1_4 = c(rep('',6),'25 - 15','25 - 15','90 - 15','90 - 15')
rep_b1_5 = c(rep('',6),'20 - 20','20 - 20','45 - 20','45 - 20')
rep_b2_1 = c('','10','10','10','10','35 - 5','40 - 5','40 - 5','30 - 5','70 - 5')
rep_b2_2 = c(rep('',6),'30 - 7','30 - 7','30 - 7','60 - 7')
rep_b2_3 = c(rep('',6),'27.5 - 10','27.5 - 10','27.5 - 10','52.5 - 10')
rep_b2_4 = c(rep('',6),'25 - 15','25 - 15','25 - 15','40 - 15')
rep_b2_5 = c(rep('',6),'20 - 20','20 - 20','20 - 20','30 - 20')
last_df = data.frame(matrix(ncol = 8, nrow = 10)) %>%
bind_cols(
data.frame(v21_power = c(rep('',6), rep(1,4)),
v22_notes2 = rep('',10)))
b1_df =  data.frame(b1,ell_0,rep_b1_1,rep_b1_2,rep_b1_3,rep_b1_4,rep_b1_5) %>%
bind_cols(last_df)
b2_df =  data.frame(b2,ell_0,rep_b2_1,rep_b2_2,rep_b2_3,rep_b2_4,rep_b2_5) %>%
bind_cols(last_df)
colnames(b1_df) = c(
'exercises','notes','set 1 (lbs. - #)','set 2 (lbs. - #)',
'set 3 (lbs. - #)','set 4 (lbs. - #)','set 5 (lbs. - #)',
'set 6 (lbs. - #)','set 7 (lbs. - #)',
'set 8 (lbs. - #)','set 9 (lbs. - #)','weight_type',
'routine','Exact_Muscle','Type of Day','is_power','notes2')
colnames(b2_df) = c(
'exercises','notes','set 1 (lbs. - #)','set 2 (lbs. - #)',
'set 3 (lbs. - #)','set 4 (lbs. - #)','set 5 (lbs. - #)',
'set 6 (lbs. - #)','set 7 (lbs. - #)',
'set 8 (lbs. - #)','set 9 (lbs. - #)','weight_type',
'routine','Exact_Muscle','Type of Day','is_power','notes2')
w_df =bind_rows(b1_df,b2_df,b1_df,b2_df,b1_df,b2_df)
w1_df = info_df %>%
bind_cols(w_df)
colnames(w1_df)[1:5] = c('Date','Exercise_Number','completion of workout','area_of_workout','muscles_group')
write.csv(w1_df,'emp_workout.csv',row.names = FALSE)
getwd()
setwd("C:/Users/james/Bootcamp/challenge-questions-and-projects/challenge-question-9/gato365P-readme-generator/learning-files")
df = readxl::read_xlsx('list-of-licenses.xlsx')
library(dplyr)
View(df)
df = df %>%
mutate(jsonType = paste0(
'
{
fullName: ', `license-name` ,',\n',
'abbrName: ', `license-abbrev`,',\n',
'},'
))
View(df)
write.table(df,'licenses.txt')
library(dplyr)
setwd("C:/Users/james/Bootcamp/challenge-questions-and-projects/challenge-question-9/gato365P-readme-generator/learning-files")
df = readxl::read_xlsx('list-of-licenses.xlsx')
df = df %>%
mutate(jsonType = paste0(
'
{
fullName: ', `license-name` ,',\n',
'abbrName: ', `license-abbrev`,',\n',
'},'
))
write.table(df,'licenses.txt', row.names = FALSE, col.names = FALSE)
install.packages('jsonify')
install.packages('jsonlite')
df = readxl::read_xlsx('list-of-licenses.xlsx')
x <- jsonlite::toJSON(df)
x
json <- jsonlite::toJSON(df)
write.table(json,'licenses-json.txt', row.names = FALSE, col.names = FALSE)
library(dplyr)
setwd("C:/Users/james/Bootcamp/challenge-questions-and-projects/challenge-question-9/gato365P-readme-generator/learning-files")
df = readxl::read_xlsx('list-of-licenses.xlsx')
licences_json <- jsonlite::toJSON(df)
write.table(<- jsonlite::toJSON(df),'licenses-json.txt')#, row.names = FALSE, col.names = FALSE)
write.table(licences_json,'licenses-json.txt')#, row.names = FALSE, col.names = FALSE)
licences_json
write(licences_json,'licenses-json.txt')#, row.names = FALSE, col.names = FALSE)
